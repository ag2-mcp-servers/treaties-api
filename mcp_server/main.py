# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:18:04+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query
from pydantic import conint

from models import (
    BusinessItemResource,
    BusinessItemResourceCollection,
    GovernmentOrganisationResourceCollection,
    House,
    ParliamentaryProcess,
    SeriesMembershipResourceCollection,
    SeriesMembershipType,
    TreatyResource,
    TreatyResourceCollection,
)

app = MCPProxy(
    contact={
        'email': 'softwareengineering@parliament.uk',
        'name': 'UK Parliament',
        'url': 'https://www.parliament.uk/',
    },
    description='An API exposing details of the treaties laid before Parliament.',
    title='Treaties API',
    version='v1',
)


@app.get('/api/BusinessItem/{id}', tags=['business_item_handling'])
def get_business_item_by_id(id: str):
    """
    Returns business item by ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/GovernmentOrganisation', tags=['organisation_info_management'])
def get_organisations():
    """
    Returns all government organisations.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/SeriesMembership', tags=['treaty_data_access', 'organisation_info_management']
)
def get_series_memberships():
    """
    Returns all series memberships.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Treaty',
    tags=[
        'business_item_handling',
        'treaty_data_access',
        'organisation_info_management',
    ],
)
def get_treaties(
    search_text: Optional[str] = Query(None, alias='SearchText'),
    government_organisation_id: Optional[conint(ge=1, le=2147483647)] = Query(
        None, alias='GovernmentOrganisationId'
    ),
    series: Optional[SeriesMembershipType] = Query(None, alias='Series'),
    parliamentary_process: Optional[ParliamentaryProcess] = Query(
        None, alias='ParliamentaryProcess'
    ),
    debate_scheduled: Optional[bool] = Query(None, alias='DebateScheduled'),
    motion_to_not_ratify: Optional[bool] = Query(None, alias='MotionToNotRatify'),
    recommended_not_ratify: Optional[bool] = Query(None, alias='RecommendedNotRatify'),
    house: Optional[House] = Query(None, alias='House'),
    skip: Optional[conint(ge=0, le=2147483647)] = Query(None, alias='Skip'),
    take: Optional[conint(ge=0, le=2147483647)] = Query(None, alias='Take'),
):
    """
    Returns a list of treaties.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Treaty/{id}', tags=['treaty_data_access', 'business_item_handling'])
def get_treaty_by_id(id: str):
    """
    Returns a treaty by ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Treaty/{id}/BusinessItems',
    tags=['business_item_handling', 'treaty_data_access'],
)
def get_business_items_by_treaty_id(id: str):
    """
    Returns business items belonging to the treaty with ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
